{"version":3,"file":"static/js/432.3699d6b2.chunk.js","mappings":"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","sources":["components/authForm/utils/SchemaValidateForm.js","components/authForm/AuthForm.styled.js","components/authForm/AuthForm.jsx","pages/RegisterPage.jsx"],"sourcesContent":["import * as Yup from 'yup';\n\nconst passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[A-Za-z\\d]{6,16}$/;\n\nexport const getValidationSchema = isRegisterForm => {\n  return Yup.object().shape({\n    name: isRegisterForm\n      ? Yup.string().trim().required('Required')\n      : Yup.string().trim(),\n\n    email: Yup.string().email('Invalid email address').required('Required'),\n    password: Yup.string()\n      .test(\n        'password',\n        'Password must contain minimum 6 characters, maximum 16, at least 1 uppercase letter, 1 lowercase letter and 1 digit with no symbols.',\n        value => {\n          return passwordRegex.test(value);\n        }\n      )\n      .required('Required'),\n    confirmPassword: isRegisterForm\n      ? Yup.string()\n          .oneOf([Yup.ref('password'), null], 'Password must match')\n          .required('Required')\n      : Yup.string(),\n  });\n};\n","import styled, { css, keyframes } from 'styled-components';\nimport { Form, Field, ErrorMessage } from 'formik';\nimport { IoClose } from 'react-icons/io5';\nimport { BsCheckLg } from 'react-icons/bs';\nimport { AiOutlineEyeInvisible } from 'react-icons/ai';\nimport { AiOutlineArrowLeft } from 'react-icons/ai';\nimport { Link } from 'react-router-dom';\nimport variables from 'settings/variables';\n\nconst {\n  colors: {\n    simpleBlack,\n    buttonsHoverBg,\n    placeHolderColor,\n    accentInputInvalidValue,\n    cardBgColor,\n    accentAddPetCard,\n    accentHeaderButton,\n  },\n} = variables;\n\nconst pulseAnimation = keyframes`\n  0% {\n    transform: scale(1);\n  }\n  50% {\n    transform: scale(1.2);\n  }\n  100% {\n    transform: scale(1);\n  }\n`;\n\nexport const StyledContainer = styled.div`\n  position: relative;\n  z-index: 10;\n  padding: 40px 0;\n\n  @media (min-width: 479px) {\n    padding-top: 80px;\n    padding-bottom: 140px;\n  }\n`;\n\nexport const StyledRow = styled(AiOutlineArrowLeft)`\n  position: absolute;\n  left: 20px;\n  top: 40px;\n  width: 26px;\n  height: 26px;\n  color: ${accentHeaderButton};\n  animation: ${pulseAnimation} 1.5s infinite;\n\n  &:hover {\n    width: 40px;\n  }\n\n  @media (min-width: 767px) {\n    display: none;\n  }\n`;\n\nexport const StyledForm = styled(Form)`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  max-width: 280px;\n  margin: 0 auto;\n  padding: 40px 12px;\n  box-shadow: 3px 8px 14px 0px rgba(136, 198, 253, 0.19);\n  border-radius: 20px;\n  box-sizing: border-box;\n  background-color: ${cardBgColor};\n\n  @media (min-width: 479px) {\n    max-width: 610px;\n    padding: 60px 75px;\n    border-radius: 40px;\n  }\n`;\n\nexport const StyledTitle = styled.h1`\n  color: ${simpleBlack};\n  text-align: center;\n  font-size: 24px;\n  font-weight: 500;\n  margin-bottom: 20px;\n\n  @media (min-width: 479px) {\n    font-size: 36px;\n    margin-bottom: 40px;\n  }\n`;\n\nexport const StyledInputsContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 14px;\n  margin-bottom: 40px;\n\n  @media (min-width: 479px) {\n    gap: 32px;\n    margin-bottom: 50px;\n  }\n`;\n\nexport const InputContainer = styled.div`\n  position: relative;\n`;\n\nexport const StyledInput = styled(Field)`\n  font-family: 'Manrope', sans-serif;\n  font-size: 16px;\n  width: 250px;\n  padding: 12px 16px;\n  border-radius: 40px;\n  border: 1px solid ${buttonsHoverBg};\n  color: ${placeHolderColor};\n  cursor: pointer;\n  transform: scale(1);\n  transition: transform 0.5s ease;\n\n  @media (min-width: 479px) {\n    width: 430px;\n  }\n  &:focus {\n    outline: transparent;\n    border-color: ${buttonsHoverBg};\n  }\n\n  &:hover {\n    transform: scale(1.1);\n  }\n\n  &::placeholder {\n    color: ${placeHolderColor};\n    line-height: 1.5;\n  }\n\n  ${props =>\n    props.touched &&\n    css`\n      &.error {\n        border: 1px solid ${accentInputInvalidValue};\n      }\n      &.success {\n        border: 1px solid ${accentAddPetCard};\n      }\n\n      &.initial {\n        border-color: 1px solid ${buttonsHoverBg};\n      }\n    `}\n`;\n\nexport const StyledIconClear = styled(IoClose)`\n  position: absolute;\n  width: 24px;\n  height: 24px;\n  right: 16px;\n  top: 8px;\n  color: ${accentInputInvalidValue};\n  cursor: pointer;\n\n  transform: scale(1);\n  transition: transform 0.5s ease;\n\n  &:hover {\n    transform: scale(1.1);\n  }\n\n  ${StyledInput}.initial + & {\n    display: none;\n  }\n`;\n\nexport const StyledIconCheck = styled(BsCheckLg)`\n  position: absolute;\n  width: 24px;\n  height: 24px;\n  right: 16px;\n  top: 8px;\n  color: ${accentAddPetCard};\n\n  ${StyledInput}.initial + & {\n    display: none;\n  }\n`;\n\nexport const StyledError = styled(ErrorMessage)`\n  color: ${accentInputInvalidValue};\n\n  margin-left: 16px;\n  font-size: 12px;\n  display: block;\n  margin-top: 5px;\n`;\n\nexport const StyledIconEye = styled(AiOutlineEyeInvisible)`\n  position: absolute;\n  right: 16px;\n  top: 8px;\n  width: 24px;\n  height: 24px;\n  cursor: pointer;\n\n  transform: scale(1);\n  transition: transform 0.5s ease;\n\n  &:hover {\n    transform: scale(1.1);\n  }\n\n  color: ${props =>\n    props.showFields ? `${placeHolderColor}` : `${buttonsHoverBg}`};\n  margin-right: ${props =>\n    (props.touched && !props.errors) || (props.touched && props.errors)\n      ? '30px'\n      : '0'};\n`;\n\nexport const StyledButton = styled.button`\n  font-family: 'Manrope', sans-serif;\n  max-width: 250px;\n  font-size: 20px;\n  font-weight: 600;\n  padding: 10px 28px;\n  text-align: center;\n  border-radius: 40px;\n  background-color: ${buttonsHoverBg};\n  border: transparent;\n  color: ${cardBgColor};\n  margin-bottom: 8px;\n  cursor: pointer;\n  transition: all 0.5s ease;\n\n  @media (min-width: 479px) {\n    max-width: 460px;\n    margin-bottom: 16px;\n  }\n\n  &:hover {\n    background-color: ${accentHeaderButton};\n    box-shadow: 5px 10px 20px 0px rgba(0, 0, 0, 0.2);\n  }\n`;\n\nexport const StyledText = styled.p`\n  font-size: 12px;\n  text-align: center;\n  color: ${placeHolderColor};\n`;\n\nexport const StyledLink = styled(Link)`\n  color: ${buttonsHoverBg};\n  text-decoration: underline;\n`;\n","import { useState } from 'react';\nimport { Formik } from 'formik';\nimport { getValidationSchema } from './utils/SchemaValidateForm';\nimport { Link } from 'react-router-dom';\n// import { useLocation, useNavigate } from 'react-router-dom';\n\nimport {\n  StyledInputsContainer,\n  StyledContainer,\n  StyledForm,\n  StyledInput,\n  StyledIconClear,\n  InputContainer,\n  StyledIconCheck,\n  StyledError,\n  StyledIconEye,\n  StyledButton,\n  StyledTitle,\n  StyledText,\n  StyledLink,\n  StyledRow,\n} from './AuthForm.styled';\n\nconst clearInputValue = (setFieldValue, fieldName) => {\n  setFieldValue(fieldName, '');\n};\n\nfunction AuthForm({ formType, onSubmit, showNameField, showConfirmPassword }) {\n  const [showFields, setShowFields] = useState({\n    password: false,\n    confirmPassword: false,\n  });\n\n  // const navigate = useNavigate();\n\n  const handleToggleField = fieldName => {\n    setShowFields(prevState => ({\n      ...prevState,\n      [fieldName]: !prevState[fieldName],\n    }));\n  };\n\n  const isRegisterForm = formType === 'register';\n  const validationSchema = getValidationSchema(isRegisterForm);\n\n  const handleFormSubmit = (values, { setSubmitting }) => {\n    onSubmit({\n      name: values.name.trim(),\n      email: values.email.trim(),\n      password: values.password.trim(),\n    });\n    // if (isRegisterForm) {\n    //   navigate('/userpage', { state: { pathname: 'register' } });\n    // } else {\n    //   navigate('/userpage', { state: { pathname: 'login' } });\n    // }\n  };\n\n  return (\n    <StyledContainer>\n      <Formik\n        initialValues={{\n          name: '',\n          email: '',\n          password: '',\n          confirmPassword: '',\n        }}\n        validationSchema={validationSchema}\n        onSubmit={handleFormSubmit}\n      >\n        {({\n          values,\n          handleChange,\n          handleBlur,\n          handleSubmit,\n          touched,\n          errors,\n          isSubmitting,\n          setFieldValue,\n        }) => (\n          <StyledForm onSubmit={handleSubmit} autoComplete=\"off\">\n            <Link to=\"/\">\n              <StyledRow />\n            </Link>\n            <StyledTitle>\n              {isRegisterForm ? 'Registration' : 'Login'}\n            </StyledTitle>\n            <StyledInputsContainer>\n              {showNameField && isRegisterForm && (\n                <>\n                  <InputContainer>\n                    <StyledInput\n                      className={`input ${\n                        touched.name\n                          ? errors.name\n                            ? 'error'\n                            : 'success'\n                          : 'initial'\n                      }`}\n                      touched={touched.name?.toString()}\n                      type=\"name\"\n                      name=\"name\"\n                      onChange={handleChange}\n                      onBlur={handleBlur}\n                      value={values.name}\n                      placeholder=\"Name\"\n                    />\n                    {touched.name && errors.name ? (\n                      <StyledIconClear\n                        onClick={() => clearInputValue(setFieldValue, 'name')}\n                      />\n                    ) : (\n                      <StyledIconCheck />\n                    )}\n\n                    <StyledError component=\"label\" name=\"name\" />\n                  </InputContainer>\n                </>\n              )}\n\n              <InputContainer>\n                <StyledInput\n                  className={`input ${\n                    touched.email\n                      ? errors.email\n                        ? 'error'\n                        : 'success'\n                      : 'initial'\n                  }`}\n                  touched={touched.email?.toString()}\n                  type=\"email\"\n                  name=\"email\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.email}\n                  placeholder=\"Email\"\n                />\n                {touched.email && errors.email ? (\n                  <StyledIconClear\n                    onClick={() => clearInputValue(setFieldValue, 'email')}\n                  />\n                ) : (\n                  <StyledIconCheck />\n                )}\n\n                <StyledError component=\"label\" name=\"email\" />\n              </InputContainer>\n              <InputContainer>\n                <StyledInput\n                  className={`input ${\n                    touched.password\n                      ? errors.password\n                        ? 'error'\n                        : 'success'\n                      : 'initial'\n                  }`}\n                  touched={touched.password?.toString()}\n                  type={showFields.password ? 'text' : 'password'}\n                  name=\"password\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.password}\n                  placeholder=\"Password\"\n                />\n                <StyledIconEye\n                  showFields={showFields.password}\n                  touched={touched.password?.toString()}\n                  errors={errors.password}\n                  onClick={() => handleToggleField('password')}\n                />\n                {touched.password && !errors.password && <StyledIconCheck />}\n                {touched.password && errors.password && (\n                  <StyledIconClear\n                    onClick={() => clearInputValue(setFieldValue, 'password')}\n                  />\n                )}\n                <StyledError component=\"label\" name=\"password\" />\n              </InputContainer>\n\n              {showConfirmPassword && isRegisterForm && (\n                <>\n                  <InputContainer>\n                    <StyledInput\n                      className={`input ${\n                        touched.confirmPassword\n                          ? errors.confirmPassword\n                            ? 'error'\n                            : 'success'\n                          : 'initial'\n                      }`}\n                      touched={touched.confirmPassword?.toString()}\n                      type={showFields.confirmPassword ? 'text' : 'password'}\n                      name=\"confirmPassword\"\n                      onChange={handleChange}\n                      onBlur={handleBlur}\n                      value={values.confirmPassword}\n                      placeholder=\"Confirm password\"\n                    />\n                    <StyledIconEye\n                      showFields={showFields.confirmPassword}\n                      touched={touched.confirmPassword?.toString()}\n                      errors={errors.confirmPassword}\n                      onClick={() => handleToggleField('confirmPassword')}\n                    />\n                    {touched.confirmPassword && !errors.confirmPassword && (\n                      <StyledIconCheck />\n                    )}\n                    {touched.confirmPassword && errors.confirmPassword && (\n                      <StyledIconClear\n                        onClick={() =>\n                          clearInputValue(setFieldValue, 'confirmPassword')\n                        }\n                      />\n                    )}\n                    <StyledError component=\"label\" name=\"confirmPassword\" />\n                  </InputContainer>\n                </>\n              )}\n            </StyledInputsContainer>\n            <StyledButton type=\"submit\">\n              {isRegisterForm ? 'Registration' : 'Login'}\n            </StyledButton>\n            <StyledText>\n              {isRegisterForm\n                ? 'Already have an account? '\n                : \"Don't have an account yet? \"}\n              <StyledLink to={isRegisterForm ? '/login' : '/register'}>\n                {isRegisterForm ? 'Login' : 'Register'}\n              </StyledLink>\n            </StyledText>\n          </StyledForm>\n        )}\n      </Formik>\n    </StyledContainer>\n  );\n}\n\nexport default AuthForm;\n","import AuthForm from 'components/authForm/AuthForm';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { register } from 'redux/auth/authOperations';\nimport toast from 'react-hot-toast';\nimport { useEffect } from 'react';\nimport { selectError } from 'redux/auth/authSelectors';\nimport PictureContainer from 'components/pictureContainer/PictureContainer.styled';\n\nconst RegisterPage = () => {\n  const dispatch = useDispatch();\n  const error = useSelector(selectError);\n\n  const handleRegistration = userData => {\n    dispatch(register(userData));\n  };\n\n  useEffect(() => {\n    if (error) {\n      toast.error('User with the same email already exists', {\n        duration: 2000,\n        position: 'top-center',\n        style: {\n          backgroundColor: '#54ADFF',\n          borderRadius: '20px',\n          color: '#fef9f9',\n          fontFamily: 'Manrope, sans-serif',\n          fontWeight: '700',\n        },\n      });\n    }\n  }, [error]);\n\n  return (\n    <PictureContainer.PawContainer>\n      <AuthForm\n        onSubmit={handleRegistration}\n        formType=\"register\"\n        showNameField={true}\n        showConfirmPassword={true}\n      />\n    </PictureContainer.PawContainer>\n  );\n};\n\nexport default RegisterPage;\n"],"names":["passwordRegex","_variables$colors","variables","simpleBlack","buttonsHoverBg","placeHolderColor","accentInputInvalidValue","cardBgColor","accentAddPetCard","accentHeaderButton","pulseAnimation","keyframes","_templateObject","_taggedTemplateLiteral","StyledContainer","styled","_templateObject2","StyledRow","AiOutlineArrowLeft","_templateObject3","StyledForm","Form","_templateObject4","StyledTitle","_templateObject5","StyledInputsContainer","_templateObject6","InputContainer","_templateObject7","StyledInput","Field","_templateObject8","props","touched","css","_templateObject9","StyledIconClear","IoClose","_templateObject10","StyledIconCheck","BsCheckLg","_templateObject11","StyledError","ErrorMessage","_templateObject12","StyledIconEye","AiOutlineEyeInvisible","_templateObject13","showFields","concat","errors","StyledButton","_templateObject14","StyledText","_templateObject15","StyledLink","Link","_templateObject16","clearInputValue","setFieldValue","fieldName","_ref","formType","onSubmit","showNameField","showConfirmPassword","_useState","useState","password","confirmPassword","_useState2","_slicedToArray","setShowFields","handleToggleField","prevState","_objectSpread","_defineProperty","isRegisterForm","validationSchema","Yup","shape","name","trim","required","email","test","value","oneOf","getValidationSchema","_jsx","children","Formik","initialValues","values","_ref2","setSubmitting","_ref3","_touched$name","_touched$email","_touched$password","_touched$password2","_touched$confirmPassw","_touched$confirmPassw2","handleChange","handleBlur","handleSubmit","isSubmitting","_jsxs","autoComplete","to","_Fragment","className","toString","type","onChange","onBlur","placeholder","onClick","component","dispatch","useDispatch","error","useSelector","selectError","useEffect","toast","duration","position","style","backgroundColor","borderRadius","color","fontFamily","fontWeight","PictureContainer","AuthForm","userData","register"],"sourceRoot":""}