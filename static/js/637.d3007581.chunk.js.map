{"version":3,"file":"static/js/637.d3007581.chunk.js","mappings":"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","sources":["components/authForm/utils/SchemaValidateForm.js","components/authForm/AuthForm.jsx","components/authForm/AuthForm.styled.js","pages/LoginPage.jsx"],"sourcesContent":["import * as Yup from 'yup';\n\nconst passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[A-Za-z\\d]{6,16}$/;\n\nexport const getValidationSchema = isRegisterForm => {\n  return Yup.object().shape({\n    name: isRegisterForm\n      ? Yup.string()\n          .min(2, 'Name must be at least 2 characters')\n          .max(16, 'Name must be at most 16 characters')\n          .trim()\n          .required('Required')\n          .matches(\n            /^[A-Z][a-z0-9]*$/,\n            'Name must start with an uppercase letter and can contain only lowercase letters and digits'\n          )\n      : Yup.string().trim(),\n\n    email: Yup.string()\n      .email('Invalid email address')\n      .required('Required')\n      .trim(),\n    password: Yup.string()\n      .test(\n        'password',\n        'Password must contain minimum 6 characters, maximum 16, at least 1 uppercase letter, 1 lowercase letter and 1 digit with no symbols.',\n        value => {\n          return passwordRegex.test(value);\n        }\n      )\n      .required('Required'),\n    confirmPassword: isRegisterForm\n      ? Yup.string()\n          .oneOf([Yup.ref('password'), null], 'Password must match')\n          .required('Required')\n      : Yup.string(),\n  });\n};\n","import { useState } from 'react';\nimport { Formik } from 'formik';\nimport { getValidationSchema } from './utils/SchemaValidateForm';\nimport { useNavigate } from 'react-router-dom';\n\nimport {\n  StyledInputsContainer,\n  StyledContainer,\n  StyledForm,\n  StyledInput,\n  StyledIconClear,\n  InputContainer,\n  StyledIconCheck,\n  StyledError,\n  StyledIconEye,\n  StyledButton,\n  StyledTitle,\n  StyledText,\n  StyledLink,\n  StyledRow,\n  StyledIconEyeOpen,\n} from './AuthForm.styled';\n\nconst clearInputValue = (setFieldValue, fieldName) => {\n  setFieldValue(fieldName, '');\n};\n\nfunction AuthForm({ formType, onSubmit, showNameField, showConfirmPassword }) {\n  const [showFields, setShowFields] = useState({\n    password: false,\n    confirmPassword: false,\n  });\n\n  const navigate = useNavigate();\n\n  const handleToggleField = fieldName => {\n    setShowFields(prevState => ({\n      ...prevState,\n      [fieldName]: !prevState[fieldName],\n    }));\n  };\n\n  const isRegisterForm = formType === 'register';\n  const validationSchema = getValidationSchema(isRegisterForm);\n\n  const handleFormSubmit = values => {\n    onSubmit({\n      name: values.name.trim(),\n      email: values.email.trim(),\n      password: values.password.trim(),\n    });\n  };\n\n  return (\n    <StyledContainer data-isregisterform={isRegisterForm}>\n      <Formik\n        initialValues={{\n          name: '',\n          email: '',\n          password: '',\n          confirmPassword: '',\n        }}\n        validationSchema={validationSchema}\n        onSubmit={handleFormSubmit}\n      >\n        {({\n          values,\n          handleChange,\n          handleBlur,\n          handleSubmit,\n          touched,\n          errors,\n          setFieldValue,\n        }) => (\n          <StyledForm onSubmit={handleSubmit} autoComplete=\"off\">\n            <StyledRow onClick={() => navigate(-1)} />\n            <StyledTitle>\n              {isRegisterForm ? 'Registration' : 'Login'}\n            </StyledTitle>\n            <StyledInputsContainer>\n              {showNameField && isRegisterForm && (\n                <>\n                  <InputContainer>\n                    <StyledInput\n                      className={`input ${\n                        touched.name\n                          ? errors.name\n                            ? 'error'\n                            : 'success'\n                          : 'initial'\n                      }`}\n                      touched={touched.name?.toString()}\n                      type=\"name\"\n                      name=\"name\"\n                      onChange={handleChange}\n                      onBlur={handleBlur}\n                      value={values.name}\n                      placeholder=\"Name\"\n                    />\n                    {touched.name && errors.name ? (\n                      <StyledIconClear\n                        onClick={() => clearInputValue(setFieldValue, 'name')}\n                      />\n                    ) : (\n                      <StyledIconCheck />\n                    )}\n                    <StyledError component=\"label\" name=\"name\" />\n                  </InputContainer>\n                </>\n              )}\n              <InputContainer>\n                <StyledInput\n                  className={`input ${\n                    touched.email\n                      ? errors.email\n                        ? 'error'\n                        : 'success'\n                      : 'initial'\n                  }`}\n                  touched={touched.email?.toString()}\n                  type=\"email\"\n                  name=\"email\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.email}\n                  placeholder=\"Email\"\n                />\n                {touched.email && errors.email ? (\n                  <StyledIconClear\n                    onClick={() => clearInputValue(setFieldValue, 'email')}\n                  />\n                ) : (\n                  <StyledIconCheck />\n                )}\n                <StyledError component=\"label\" name=\"email\" />\n              </InputContainer>\n              <InputContainer>\n                <StyledInput\n                  className={`input ${\n                    touched.password\n                      ? errors.password\n                        ? 'error'\n                        : 'success'\n                      : 'initial'\n                  }`}\n                  touched={touched.password?.toString()}\n                  type={showFields.password ? 'text' : 'password'}\n                  name=\"password\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.password}\n                  placeholder=\"Password\"\n                />\n                {touched.password && !errors.password && <StyledIconCheck />}\n                {touched.password && errors.password && (\n                  <StyledIconClear\n                    onClick={() => clearInputValue(setFieldValue, 'password')}\n                  />\n                )}\n                {showFields.password ? (\n                  <StyledIconEyeOpen\n                    onClick={() => handleToggleField('password')}\n                  />\n                ) : (\n                  <StyledIconEye\n                    data-showfields={showFields.password}\n                    errors={errors.password}\n                    onClick={() => handleToggleField('password')}\n                  />\n                )}\n                <StyledError component=\"label\" name=\"password\" />\n              </InputContainer>\n              {showConfirmPassword && isRegisterForm && (\n                <>\n                  <InputContainer>\n                    <StyledInput\n                      className={`input ${\n                        touched.confirmPassword\n                          ? errors.confirmPassword\n                            ? 'error'\n                            : 'success'\n                          : 'initial'\n                      }`}\n                      touched={touched.confirmPassword?.toString()}\n                      type={showFields.confirmPassword ? 'text' : 'password'}\n                      name=\"confirmPassword\"\n                      onChange={handleChange}\n                      onBlur={handleBlur}\n                      value={values.confirmPassword}\n                      placeholder=\"Confirm password\"\n                    />\n                    {touched.confirmPassword && errors.confirmPassword && (\n                      <StyledIconClear\n                        onClick={() =>\n                          clearInputValue(setFieldValue, 'confirmPassword')\n                        }\n                      />\n                    )}\n                    {touched.confirmPassword && !errors.confirmPassword && (\n                      <StyledIconCheck />\n                    )}\n                    {showFields.confirmPassword ? (\n                      <StyledIconEyeOpen\n                        onClick={() => handleToggleField('confirmPassword')}\n                      />\n                    ) : (\n                      <StyledIconEye\n                        data-showfields={showFields.confirmPassword}\n                        errors={errors.confirmPassword}\n                        onClick={() => handleToggleField('confirmPassword')}\n                      />\n                    )}\n                    <StyledError component=\"label\" name=\"confirmPassword\" />\n                  </InputContainer>\n                </>\n              )}\n            </StyledInputsContainer>\n            <StyledButton type=\"submit\">\n              {isRegisterForm ? 'Registration' : 'Login'}\n            </StyledButton>\n            <StyledText>\n              {isRegisterForm\n                ? 'Already have an account? '\n                : \"Don't have an account yet? \"}\n              <StyledLink to={isRegisterForm ? '/login' : '/register'}>\n                {isRegisterForm ? 'Login' : 'Register'}\n              </StyledLink>\n            </StyledText>\n          </StyledForm>\n        )}\n      </Formik>\n    </StyledContainer>\n  );\n}\n\nexport default AuthForm;\n","import styled, { css, keyframes } from 'styled-components';\nimport { Form, Field, ErrorMessage } from 'formik';\nimport { IoClose } from 'react-icons/io5';\nimport { BsCheckLg } from 'react-icons/bs';\nimport { AiOutlineEyeInvisible } from 'react-icons/ai';\nimport { AiOutlineArrowLeft } from 'react-icons/ai';\nimport { AiOutlineEye } from 'react-icons/ai';\nimport { Link } from 'react-router-dom';\nimport variables from 'settings/variables';\n\nconst {\n  colors: {\n    simpleBlack,\n    buttonsHoverBg,\n    placeHolderColor,\n    accentInputInvalidValue,\n    cardBgColor,\n    accentAddPetCard,\n    accentHeaderButton,\n  },\n} = variables;\n\nconst pulseAnimation = keyframes`\n  0% {\n    transform: scale(1);\n  }\n  50% {\n    transform: scale(1.2);\n  }\n  100% {\n    transform: scale(1);\n  }\n`;\n\nexport const StyledContainer = styled.div`\n  position: relative;\n  z-index: 10;\n  padding: 40px 0;\n\n  @media (min-width: 479px) {\n    padding-top: 80px;\n\n    ${props =>\n      props['data-isregisterform']\n        ? `padding-bottom: 140px`\n        : `padding-bottom: 290px`}\n  }\n`;\n\nexport const StyledRow = styled(AiOutlineArrowLeft)`\n  position: absolute;\n  left: 20px;\n  top: 40px;\n  width: 26px;\n  height: 26px;\n  color: ${accentHeaderButton};\n  animation: ${pulseAnimation} 1.5s infinite;\n\n  &:hover {\n    width: 40px;\n  }\n\n  @media (min-width: 1279px) {\n    display: none;\n  }\n`;\n\nexport const StyledForm = styled(Form)`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  max-width: 280px;\n  margin: 0 auto;\n  padding: 40px 12px;\n  box-shadow: 3px 8px 14px 0px rgba(136, 198, 253, 0.19);\n  border-radius: 20px;\n  box-sizing: border-box;\n  background-color: ${cardBgColor};\n\n  @media (min-width: 479px) {\n    max-width: 610px;\n    padding: 60px 75px;\n    border-radius: 40px;\n  }\n`;\n\nexport const StyledTitle = styled.h1`\n  color: ${simpleBlack};\n  text-align: center;\n  font-size: 24px;\n  font-weight: 500;\n  margin-bottom: 20px;\n\n  @media (min-width: 479px) {\n    font-size: 36px;\n    margin-bottom: 40px;\n  }\n`;\n\nexport const StyledInputsContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 14px;\n  margin-bottom: 40px;\n\n  @media (min-width: 479px) {\n    gap: 32px;\n    margin-bottom: 50px;\n  }\n`;\n\nexport const InputContainer = styled.div`\n  position: relative;\n`;\n\nexport const StyledInput = styled(Field)`\n  font-family: 'Manrope', sans-serif;\n  font-size: 16px;\n  width: 250px;\n  padding: 12px 16px;\n  border-radius: 40px;\n  border: 1px solid ${buttonsHoverBg};\n  color: ${placeHolderColor};\n  cursor: pointer;\n  transform: scale(1);\n  transition: transform 0.5s ease;\n\n  @media (min-width: 479px) {\n    width: 380px;\n  }\n  @media (min-width: 569px) {\n    width: 460px;\n  }\n  &:focus {\n    outline: transparent;\n    border-color: ${buttonsHoverBg};\n  }\n\n  &:hover {\n    transform: scale(1.1);\n  }\n\n  &::placeholder {\n    color: ${placeHolderColor};\n    line-height: 1.5;\n  }\n\n  ${props =>\n    props.touched &&\n    css`\n      &.error {\n        border: 1px solid ${accentInputInvalidValue};\n      }\n      &.success {\n        border: 1px solid ${accentAddPetCard};\n      }\n\n      &.initial {\n        border-color: 1px solid ${buttonsHoverBg};\n      }\n    `}\n`;\n\nexport const StyledIconClear = styled(IoClose)`\n  position: absolute;\n  width: 24px;\n  height: 24px;\n  right: 16px;\n  top: 12px;\n  color: ${accentInputInvalidValue};\n  cursor: pointer;\n  margin-right: 30px;\n\n  transform: scale(1);\n  transition: transform 0.5s ease;\n\n  &:hover {\n    transform: scale(1.1);\n  }\n\n  ${StyledInput}.initial + & {\n    display: none;\n  }\n`;\n\nexport const StyledIconCheck = styled(BsCheckLg)`\n  position: absolute;\n  width: 24px;\n  height: 24px;\n  right: 16px;\n  top: 12px;\n  color: ${accentAddPetCard};\n  margin-right: 30px;\n\n  ${StyledInput}.initial + & {\n    display: none;\n  }\n`;\n\nexport const StyledError = styled(ErrorMessage)`\n  color: ${accentInputInvalidValue};\n  max-width: 430px;\n  margin-left: 16px;\n  font-size: 12px;\n  display: block;\n  margin-top: 5px;\n`;\n\nexport const StyledIconEye = styled(AiOutlineEyeInvisible)`\n  position: absolute;\n  right: 16px;\n  top: 12px;\n  width: 24px;\n  height: 24px;\n  cursor: pointer;\n\n  transform: scale(1);\n  transition: transform 0.5s ease;\n\n  &:hover {\n    transform: scale(1.1);\n  }\n\n  color: ${placeHolderColor};\n`;\n\nexport const StyledIconEyeOpen = styled(AiOutlineEye)`\n  position: absolute;\n  right: 16px;\n  top: 12px;\n  width: 24px;\n  height: 24px;\n  cursor: pointer;\n  color: ${buttonsHoverBg};\n\n  transform: scale(1);\n  transition: transform 0.5s ease;\n\n  &:hover {\n    transform: scale(1.1);\n  }\n`;\n\nexport const StyledButton = styled.button`\n  font-family: 'Manrope', sans-serif;\n  max-width: 250px;\n  font-size: 20px;\n  font-weight: 600;\n  padding: 10px 28px;\n  text-align: center;\n  border-radius: 40px;\n  background-color: ${buttonsHoverBg};\n  border: transparent;\n  color: ${cardBgColor};\n  margin-bottom: 8px;\n  cursor: pointer;\n  transition: all 0.5s ease;\n\n  @media (min-width: 479px) {\n    max-width: 460px;\n    margin-bottom: 16px;\n  }\n\n  &:hover {\n    background-color: ${accentHeaderButton};\n    box-shadow: 5px 10px 20px 0px rgba(0, 0, 0, 0.2);\n  }\n`;\n\nexport const StyledText = styled.p`\n  font-size: 12px;\n  text-align: center;\n  color: ${placeHolderColor};\n`;\n\nexport const StyledLink = styled(Link)`\n  color: ${buttonsHoverBg};\n  text-decoration: underline;\n`;\n","import AuthForm from 'components/authForm/AuthForm';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { logIn } from 'redux/auth/authOperations';\nimport { motion } from 'framer-motion';\nimport { useEffect } from 'react';\nimport { selectError } from 'redux/auth/authSelectors';\nimport { clearError } from 'redux/auth/authSlice';\nimport { toast } from 'react-hot-toast';\n\nconst LoginPage = () => {\n  const dispatch = useDispatch();\n  const error = useSelector(selectError);\n\n  const handleLogin = ({ email, password }) => {\n    dispatch(logIn({ email, password }));\n    const redirectToPath = '/login';\n    localStorage.setItem('redirectPath', redirectToPath);\n  };\n\n  useEffect(() => {\n    if (error) {\n      toast.error(`${error}`, {\n        duration: 2000,\n        position: 'top-center',\n        style: {\n          textAlign: 'center',\n          backgroundColor: '#54ADFF',\n          borderRadius: '20px',\n          color: '#fef9f9',\n          fontFamily: 'Manrope, sans-serif',\n          fontWeight: '700',\n        },\n      });\n    }\n    return () => dispatch(clearError());\n  }, [error, dispatch]);\n\n  return (\n    <motion.div\n      initial={{ x: '-100%' }}\n      animate={{ x: 0 }}\n      transition={{ duration: 0.7 }}\n    >\n      <AuthForm\n        onSubmit={handleLogin}\n        formType=\"login\"\n        showNameField={false}\n        showConfirmPassword={false}\n      />\n    </motion.div>\n  );\n};\n\nexport default LoginPage;\n"],"names":["passwordRegex","clearInputValue","setFieldValue","fieldName","_ref","formType","onSubmit","showNameField","showConfirmPassword","_useState","useState","password","confirmPassword","_useState2","_slicedToArray","showFields","setShowFields","navigate","useNavigate","handleToggleField","prevState","_objectSpread","_defineProperty","isRegisterForm","validationSchema","Yup","shape","name","min","max","trim","required","matches","email","test","value","oneOf","getValidationSchema","_jsx","StyledContainer","children","Formik","initialValues","values","_ref2","_touched$name","_touched$email","_touched$password","_touched$confirmPassw","handleChange","handleBlur","handleSubmit","touched","errors","_jsxs","StyledForm","autoComplete","StyledRow","onClick","StyledTitle","StyledInputsContainer","_Fragment","InputContainer","StyledInput","className","concat","toString","type","onChange","onBlur","placeholder","StyledIconClear","StyledIconCheck","StyledError","component","StyledIconEyeOpen","StyledIconEye","StyledButton","StyledText","StyledLink","to","_variables$colors","variables","simpleBlack","buttonsHoverBg","placeHolderColor","accentInputInvalidValue","cardBgColor","accentAddPetCard","accentHeaderButton","pulseAnimation","keyframes","_templateObject","_taggedTemplateLiteral","styled","_templateObject2","props","AiOutlineArrowLeft","_templateObject3","Form","_templateObject4","_templateObject5","_templateObject6","_templateObject7","Field","_templateObject8","css","_templateObject9","IoClose","_templateObject10","BsCheckLg","_templateObject11","ErrorMessage","_templateObject12","AiOutlineEyeInvisible","_templateObject13","AiOutlineEye","_templateObject14","_templateObject15","_templateObject16","Link","_templateObject17","dispatch","useDispatch","error","useSelector","selectError","useEffect","toast","duration","position","style","textAlign","backgroundColor","borderRadius","color","fontFamily","fontWeight","clearError","motion","initial","x","animate","transition","AuthForm","logIn","localStorage","setItem"],"sourceRoot":""}